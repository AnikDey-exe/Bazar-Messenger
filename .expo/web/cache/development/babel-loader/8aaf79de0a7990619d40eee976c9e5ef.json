{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _firebase = _interopRequireDefault(require(\"firebase\"));\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nvar _expoAppLoading = _interopRequireDefault(require(\"expo-app-loading\"));\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\manas\\\\ChatApp\\\\screens\\\\ChatsScreen.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ChatsScreen = function (_React$Component) {\n  (0, _inherits2.default)(ChatsScreen, _React$Component);\n\n  var _super = _createSuper(ChatsScreen);\n\n  function ChatsScreen() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ChatsScreen);\n    _this = _super.call(this);\n\n    _this.searchFilterFunction = function (text) {\n      _this.setState({\n        value: text\n      });\n\n      var newData = _this.arrayholder.filter(function (item) {\n        var itemData = (\"\" + item.name).toUpperCase();\n        var textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n\n      _this.setState({\n        allConversations: newData\n      });\n    };\n\n    _this.getConversations = function () {\n      _this.requestRef = _config.default.collection('Conversations').orderBy(\"lastMessageDate\", \"desc\").onSnapshot(function (snapshot) {\n        var conversations = [];\n        snapshot.docs.map(function (doc) {\n          var conversation = doc.data();\n          conversation['doc_id'] = doc.id;\n          conversations.push(conversation);\n        });\n        var allConversations = conversations.filter(function (conv) {\n          return conv.targetedUserId == _this.state.userId;\n        });\n\n        _this.setState({\n          allConversations: allConversations\n        });\n\n        _this.arrayholder = conversations.filter(function (conv) {\n          return conv.targetedUserId == _this.state.userId;\n        });\n        console.log(_this.state.allConversations);\n      });\n    };\n\n    _this.keyExtractor = function (item, index) {\n      return index.toString();\n    };\n\n    _this.renderItem = function (_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      var date = item.lastMessageDate.toDate() + '';\n      var finalDate = date.split(' ');\n      var actualDate = date.split(' ')[1] + ' ' + date.split(' ')[2] + ', ' + date.split(' ')[3];\n      console.log(item.lastMessageDate);\n      return _react.default.createElement(_reactNativeElements.ListItem, {\n        style: {\n          marginLeft: 10,\n          marginRight: 10\n        },\n        key: index,\n        title: item.name,\n        subtitle: item.lastMessage,\n        subtitleStyle: {\n          fontSize: 15,\n          color: 'grey',\n          marginTop: 5\n        },\n        titleStyle: {\n          color: 'black',\n          fontWeight: 'bold'\n        },\n        leftElement: _react.default.createElement(_reactNativeElements.Avatar, {\n          rounded: true,\n          source: {\n            uri: item.image\n          },\n          size: \"medium\",\n          containerStyle: {\n            marginTop: 0\n          },\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }),\n        rightElement: _react.default.createElement(_reactNative.Text, {\n          key: index,\n          style: {\n            color: 'grey',\n            marginBottom: 20\n          },\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }\n        }, \" \", actualDate, \" \"),\n        onPress: function onPress() {\n          _this.props.navigation.navigate(\"Converse\", {\n            \"details\": item\n          });\n        },\n        bottomDivider: true,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.state = {\n      userId: _firebase.default.auth().currentUser.email,\n      docId: '',\n      searchText: '',\n      allConversations: [],\n      value: '',\n      fontsLoaded: false\n    }, _this.arrayholder = [];\n    _this.requestRef = null;\n    return _this;\n  }\n\n  (0, _createClass2.default)(ChatsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getConversations();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          backgroundColor: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNativeElements.Header, {\n        leftComponent: _react.default.createElement(_reactNativeElements.Icon, {\n          name: 'arrow-left',\n          type: 'feather',\n          color: \"#f75a4f\",\n          onPress: function onPress() {\n            _this2.props.navigation.navigate('Settings');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 32\n          }\n        }),\n        centerComponent: {\n          text: '',\n          style: {\n            color: 'white'\n          }\n        },\n        rightComponent: _react.default.createElement(_reactNativeElements.Icon, {\n          name: \"plus\",\n          type: \"font-awesome\",\n          color: \"#f75a4f\",\n          onPress: function onPress() {\n            _this2.props.navigation.navigate('Create');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }\n        }),\n        backgroundColor: \"transparent\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: {\n          width: '100%',\n          flexDirection: 'row'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          width: '75%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: {\n          fontSize: 30,\n          fontWeight: 'bold',\n          marginTop: 0,\n          paddingLeft: 5,\n          fontFamily: 'Raleway'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, \" Conversations \"))), _react.default.createElement(_reactNative.View, {\n        style: {\n          marginTop: 10,\n          padding: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNativeElements.SearchBar, {\n        containerStyle: {\n          height: 47.5\n        },\n        inputContainerStyle: {\n          height: 20\n        },\n        lightTheme: true,\n        placeholder: \"Search\",\n        onChangeText: function onChangeText(text) {\n          return _this2.searchFilterFunction(text);\n        },\n        round: true,\n        autoCorrect: false,\n        value: this.state.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }\n      })), _react.default.createElement(_reactNative.FlatList, {\n        containerStyle: {\n          backgroundColor: 'rgba(255, 255, 255, 0.0)'\n        },\n        keyExtractor: this.keyExtractor,\n        data: this.state.allConversations,\n        renderItem: this.renderItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }));\n    }\n  }]);\n  return ChatsScreen;\n}(_react.default.Component);\n\nexports.default = ChatsScreen;","map":{"version":3,"sources":["C:/Users/manas/ChatApp/screens/ChatsScreen.js"],"names":["ChatsScreen","searchFilterFunction","text","setState","value","newData","arrayholder","filter","item","itemData","name","toUpperCase","textData","indexOf","allConversations","getConversations","requestRef","db","collection","orderBy","onSnapshot","snapshot","conversations","docs","map","doc","conversation","data","id","push","conv","targetedUserId","state","userId","console","log","keyExtractor","index","toString","renderItem","date","lastMessageDate","toDate","finalDate","split","actualDate","marginLeft","marginRight","lastMessage","fontSize","color","marginTop","fontWeight","uri","image","marginBottom","props","navigation","navigate","firebase","auth","currentUser","email","docId","searchText","fontsLoaded","flex","backgroundColor","style","width","flexDirection","paddingLeft","fontFamily","padding","height","React","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, StyleSheet, Text, FlatList,TouchableOpacity, Image } from 'react-native';\r\nimport { ListItem, SearchBar, Icon, Header } from 'react-native-elements';\r\nimport firebase from 'firebase';\r\nimport db from '../config'\r\nimport { TextInput } from 'react-native';\r\nimport {Avatar} from 'react-native-elements';\r\nimport AppLoading from \"expo-app-loading\";\r\nimport * as Font from \"expo-font\";\r\n\r\n// let customFonts = {\r\n//     \"Raleway\": require(\"../assets/Raleway-Regular.ttf\"),\r\n//     \"Raleway-Bold\": require(\"../assets/Raleway-Bold.ttf\"),\r\n//     \"Raleway-Thin\": require(\"../assets/Raleway-Thin.ttf\"),\r\n// };\r\n\r\nexport default class ChatsScreen extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userId: firebase.auth().currentUser.email,\r\n            docId: '',\r\n            searchText: '',\r\n            allConversations: [],\r\n            value: '',\r\n            fontsLoaded: false\r\n        },\r\n        this.arrayholder = []\r\n        this.requestRef = null\r\n    }\r\n\r\n    // async _loadFontsAsync() {\r\n    //     await Font.loadAsync(customFonts);\r\n    //     this.setState({ fontsLoaded: true });\r\n    //   }\r\n\r\n    \r\n    searchFilterFunction = (text) => {\r\n        this.setState({\r\n          value: text\r\n        })\r\n        const newData = this.arrayholder.filter(item => {      \r\n          const itemData = `${item.name}`.toUpperCase();\r\n          \r\n           const textData = text.toUpperCase();\r\n            \r\n           return itemData.indexOf(textData) > -1;    \r\n        });\r\n        \r\n        this.setState({ allConversations: newData });\r\n      }\r\n\r\n    getConversations = () => {\r\n   \r\n        // this.requestRef = db.collection('Conversations') \r\n        \r\n        //     .onSnapshot((snapshot)=>{\r\n        //         var allConversationsList = snapshot.docs.map(document => document.data());\r\n        //         this.setState({\r\n        //           allConversations : allConversationsList,\r\n        //         })\r\n        //         this.arrayholder = snapshot.docs.map(document => document.data());\r\n        //       })\r\n\r\n            this.requestRef = db.collection('Conversations') \r\n            .orderBy(\"lastMessageDate\", \"desc\")\r\n            .onSnapshot((snapshot)=>{\r\n                var conversations = []\r\n                snapshot.docs.map((doc)=>{\r\n                    var conversation = doc.data()\r\n                    conversation['doc_id'] = doc.id\r\n                    conversations.push(conversation)\r\n                });\r\n\r\n                // console.log(\"all msgs:\", allMessages)\r\n\r\n                var allConversations = conversations.filter((conv) => { return conv.targetedUserId == this.state.userId })\r\n               \r\n                this.setState({\r\n                    allConversations: allConversations\r\n                })\r\n\r\n                 this.arrayholder = conversations.filter((conv) => { return conv.targetedUserId == this.state.userId })\r\n                console.log(this.state.allConversations)\r\n            })\r\n       \r\n    }\r\n\r\n    keyExtractor = (item, index) => index.toString();\r\n\r\n    renderItem = ({item, index}) => {\r\n        var date = item.lastMessageDate.toDate() + '';\r\n        var finalDate = date.split(' ');\r\n        var actualDate = date.split(' ')[1] + ' ' + date.split(' ')[2] + ', ' + date.split(' ')[3]; \r\n        console.log(item.lastMessageDate);\r\n        return (\r\n            <ListItem\r\n                style={{ marginLeft: 10, marginRight: 10}}\r\n                key={index}\r\n                title={item.name}\r\n                subtitle={item.lastMessage}\r\n                subtitleStyle={{ fontSize: 15, color: 'grey', marginTop: 5 }}\r\n                titleStyle={{ color: 'black', fontWeight: 'bold' }}\r\n                leftElement={\r\n                    <Avatar\r\n                        rounded\r\n                        source={{ uri: item.image }}\r\n                        size=\"medium\"\r\n                        containerStyle={{\r\n\r\n                            marginTop: 0\r\n\r\n                        }}/>\r\n                }\r\n                rightElement={\r\n                  // this.state.allConversations.map((date)=>{\r\n                        <Text key={index} style={{color: 'grey', marginBottom: 20}}> {actualDate} </Text>\r\n                    // })\r\n                }\r\n                onPress={()=>{this.props.navigation.navigate(\"Converse\",{\"details\": item})}}\r\n                bottomDivider\r\n            />\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getConversations();\r\n       // this._loadFontsAsync();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <View style={{flex:1, backgroundColor: 'white'}}>\r\n                <Header\r\n                leftComponent={<Icon name={'arrow-left'} type={'feather'} color='#f75a4f' onPress={() => {this.props.navigation.navigate('Settings')}} />}\r\n                centerComponent={{ text: '', style: { color: 'white'} }}\r\n                rightComponent={<Icon name='plus' type='font-awesome' color='#f75a4f' onPress={() => {this.props.navigation.navigate('Create')}} />}\r\n                //backgroundColor=\"#f0eded\"\r\n                backgroundColor=\"transparent\"  \r\n                //backgroundColor= '#0d1d52'\r\n            \r\n                />\r\n                <View style={{width: '100%', flexDirection: 'row'}}>\r\n                    <View style={{width: '75%'}}>\r\n                        <Text style={{fontSize:30, fontWeight:'bold', marginTop:0, paddingLeft: 5, fontFamily: 'Raleway'}}> Conversations </Text>\r\n                    </View>\r\n                    {/* <View style={{width: '25%', alignContent: 'flex-end', flexDirection: 'row'}}>\r\n                        <TouchableOpacity style={{backgroundColor: 'black', marginTop: 60, borderRadius: 25, width: 30, height: 30}}>\r\n                            <Text style={{color: 'white'}}> Add </Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={{backgroundColor: 'black', marginTop: 60, marginLeft: 10, borderRadius: 25,  width: 30, height: 30}}>\r\n                            <Text style={{color: 'white'}}> Settings </Text>\r\n                        </TouchableOpacity>\r\n                    </View> */}\r\n                </View>\r\n\r\n                <View style={{marginTop:10, padding: 10}}>\r\n                    <SearchBar\r\n                    containerStyle={{height:47.5}}\r\n                    inputContainerStyle={{height:20}}\r\n                    lightTheme\r\n                    placeholder=\"Search\"\r\n                    onChangeText={text => this.searchFilterFunction(text)}\r\n                    round\r\n                    autoCorrect={false}\r\n                    value={this.state.value}/>\r\n                </View>\r\n\r\n                {/* <View> */}\r\n                    <FlatList\r\n                    containerStyle={{backgroundColor: 'rgba(255, 255, 255, 0.0)'}}\r\n                    keyExtractor={this.keyExtractor}\r\n                    data={this.state.allConversations}\r\n                    renderItem={this.renderItem}/>\r\n                {/* </View> */}\r\n            </View>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}