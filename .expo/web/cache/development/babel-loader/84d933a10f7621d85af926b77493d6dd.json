{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _firebase = _interopRequireDefault(require(\"firebase\"));\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\manas\\\\ChatApp\\\\screens\\\\CreateScreen.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar customFonts = {\n  \"Raleway\": require(\"../assets/Raleway-Regular.ttf\"),\n  \"Raleway-Bold\": require(\"../assets/Raleway-Bold.ttf\"),\n  \"Raleway-Thin\": require(\"../assets/Raleway-Thin.ttf\")\n};\n\nvar CreateScreen = function (_React$Component) {\n  (0, _inherits2.default)(CreateScreen, _React$Component);\n\n  var _super = _createSuper(CreateScreen);\n\n  function CreateScreen() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CreateScreen);\n    _this = _super.call(this);\n\n    _this.getUsers = function () {\n      _config.default.collection('Users').onSnapshot(function (snapshot) {\n        var data = snapshot.docs.map(function (document) {\n          return document.data();\n        });\n\n        _this.setState({\n          users: data\n        });\n      });\n\n      console.log(_this.state.users);\n    };\n\n    _this.getConversations = function () {\n      _config.default.collection('Conversations').onSnapshot(function (snapshot) {\n        var data = snapshot.docs.map(function (document) {\n          return document.data();\n        });\n\n        _this.setState({\n          conversations: data\n        });\n      });\n\n      console.log(_this.state.conversations);\n    };\n\n    _this.getUserDetails = function () {\n      _config.default.collection(\"Users\").where('emailID', '==', _this.state.userId).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          var data = doc.data();\n\n          _this.setState({\n            firstName: data.emailID,\n            lastName: data.lastName,\n            contact: data.contact,\n            docId: doc.id,\n            userName: data.firstName + \" \" + data.lastName,\n            description: data.description,\n            userImage: data.profilePicture\n          });\n        });\n      });\n    };\n\n    _this.getTargetUserDetails = function () {\n      _config.default.collection(\"Users\").where('emailID', '==', _this.state.targetedUserId).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          var data2 = doc.data();\n\n          _this.setState({\n            targetUserName: data2.firstName + \" \" + data2.lastName,\n            targetUserImage: data2.profilePicture\n          });\n\n          console.log(_this.state.targetUserName);\n        });\n      });\n    };\n\n    _this.fetchImage = function (imageName) {\n      var storageRef = _firebase.default.storage().ref().child(\"user_profiles/\" + imageName);\n\n      storageRef.getDownloadURL().then(function (url) {\n        _this.setState({\n          image: url\n        });\n      }).catch(function (error) {\n        _this.setState({\n          image: '#'\n        });\n      });\n    };\n\n    _this.createConversation = function () {\n      var query = _config.default.collection('Users').where('emailID', '==', _this.state.targetedUserId).onSnapshot(function (snapshot) {\n        var data = snapshot.docs.map(function (document) {\n          return document.data();\n        });\n\n        _this.setState({\n          query: data\n        });\n      });\n\n      console.log('query ' + _this.state.query.length);\n\n      if (_this.state.query.length === 0) {\n        console.log('query ' + _this.state.query.length);\n\n        _this.setState({\n          query: [],\n          secQuery: [],\n          targetedUserId: ''\n        });\n\n        return alert('This user does not exist');\n      } else {\n        var secQuery = _config.default.collection('Conversations').where('targetedUserId', '==', _this.state.targetedUserId).where('targetedUserId2', '==', _this.state.userId).onSnapshot(function (snapshot) {\n          var data = snapshot.docs.map(function (document) {\n            return document.data();\n          });\n\n          _this.setState({\n            secQuery: data\n          });\n        });\n\n        console.log('Secquery' + _this.state.secQuery.length);\n\n        if (_this.state.secQuery.length === 0) {\n          if (_this.state.targetedUserId !== _this.state.userId) {\n            console.log('Secquery' + _this.state.secQuery.length);\n\n            var conversationId = _this.createId();\n\n            _config.default.collection(\"Conversations\").add({\n              'name': _this.state.userName,\n              'targetedUserId': _this.state.targetedUserId,\n              'targetedUserId2': _this.state.userId,\n              'lastMessage': '',\n              'lastMessageDate': '',\n              'image': _this.state.userImage,\n              'conversationId': conversationId\n            });\n\n            _config.default.collection(\"Conversations\").add({\n              'name': _this.state.targetUserName,\n              'targetedUserId': _this.state.userId,\n              'targetedUserId2': _this.state.targetedUserId,\n              'lastMessage': '',\n              'lastMessageDate': '',\n              'image': _this.state.targetUserImage,\n              'conversationId': conversationId\n            });\n\n            _this.setState({\n              query: [],\n              secQuery: [],\n              targetedUserId: ''\n            });\n\n            return alert('Conversation initiated.');\n          } else {\n            _this.setState({\n              query: [],\n              secQuery: [],\n              targetedUserId: ''\n            });\n\n            return alert('You cannot start a conversation with yourself.');\n          }\n        } else {\n          _this.setState({\n            query: [],\n            secQuery: [],\n            targetedUserId: ''\n          });\n\n          return alert('This user already exists in your conversations.');\n        }\n      }\n\n      _this.setState({\n        query: [],\n        secQuery: [],\n        targetedUserId: ''\n      });\n    };\n\n    _this.createConversation2 = function () {\n      var users = _this.state.users;\n      var conversations = _this.state.conversations;\n      var query = users.find(function (user) {\n        return user.emailID === _this.state.targetedUserId;\n      });\n\n      if (query) {\n        var query2 = conversations.find(function (conversation) {\n          return conversation.targetedUserId === _this.state.targetedUserId && conversation.targetedUserId2 === _this.state.userId;\n        });\n\n        if (query2) {\n          return alert('This user already exists in your conversations.');\n        } else {\n          if (_this.state.targetedUserId !== _this.state.userId) {\n            console.log(_this.state.targetedUserId);\n\n            _this.getTargetUserDetails();\n\n            console.log(_this.state.targetedUserId);\n\n            var conversationId = _this.createId();\n\n            setTimeout(function () {\n              _config.default.collection(\"Conversations\").add({\n                'name': _this.state.userName,\n                'targetedUserId': _this.state.targetedUserId,\n                'targetedUserId2': _this.state.userId,\n                'lastMessage': 'Start chatting with your friend!',\n                'lastMessageDate': _firebase.default.firestore.Timestamp.now().toDate(),\n                'image': _this.state.userImage,\n                'conversationId': conversationId\n              });\n\n              _config.default.collection(\"Conversations\").add({\n                'name': _this.state.targetUserName,\n                'targetedUserId': _this.state.userId,\n                'targetedUserId2': _this.state.targetedUserId,\n                'lastMessage': 'Start chatting with your friend!',\n                'lastMessageDate': _firebase.default.firestore.Timestamp.now().toDate(),\n                'image': _this.state.targetUserImage,\n                'conversationId': conversationId\n              });\n\n              _this.getConversations();\n\n              _this.setState({\n                query: [],\n                secQuery: [],\n                targetedUserId: ''\n              });\n            }, 5000);\n            console.log(_this.state.targetUserName);\n            return alert('Conversation initiated.');\n          } else {\n            return alert('You cannot start a conversation with yourself.');\n          }\n        }\n      } else {\n        return alert('User not found.');\n      }\n    };\n\n    _this.state = {\n      userId: _firebase.default.auth().currentUser.email,\n      targetedUserId: '',\n      firstName: '',\n      lastName: '',\n      contact: '',\n      docId: '',\n      userName: '',\n      targetUserName: '',\n      description: '',\n      userImage: '',\n      targetUserImage: '',\n      query: [],\n      secQuery: [],\n      users: [],\n      conversations: [],\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(CreateScreen, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regenerator.default.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createId\",\n    value: function createId() {\n      return Math.random().toString(36).substring(7);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUserDetails();\n      this.fetchImage(this.state.userId);\n      this.getUsers();\n      this.getConversations();\n\n      this._loadFontsAsync();\n\n      this.setState({\n        query: [],\n        secQuery: [],\n        targetedUserId: ''\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        query: [],\n        secQuery: [],\n        targetedUserId: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNativeElements.Header, {\n        leftComponent: _react.default.createElement(_reactNativeElements.Icon, {\n          name: \"arrow-left\",\n          type: \"feather\",\n          color: \"white\",\n          onPress: function onPress() {\n            return _this2.props.navigation.goBack();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 40\n          }\n        }),\n        centerComponent: {\n          text: \"Create\",\n          style: {\n            color: 'white',\n            fontSize: 20,\n            fontWeight: 'bold',\n            height: 50,\n            paddingTop: 10\n          }\n        },\n        backgroundColor: \"#f75a4f\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          width: '75%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: {\n          marginLeft: -3,\n          color: '#f75a4f',\n          fontWeight: 'bold'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }\n      }, \" Participant \"), _react.default.createElement(_reactNative.TextInput, {\n        style: {\n          borderBottomWidth: 1,\n          paddingBottom: 5,\n          borderBottomColor: '#f75a4f',\n          fontSize: 20,\n          marginTop: 5\n        },\n        placeholder: \"Email\",\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            targetedUserId: text\n          });\n        },\n        value: this.state.targetedUserId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 25\n        }\n      }), _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: function onPress() {\n          _this2.createConversation2();\n        },\n        style: {\n          marginTop: 20,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#f75a4f',\n          padding: 5,\n          borderRadius: 5,\n          height: 50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: {\n          color: 'white',\n          fontSize: 20,\n          fontWeight: '500'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 29\n        }\n      }, \" Create \")))));\n    }\n  }]);\n  return CreateScreen;\n}(_react.default.Component);\n\nexports.default = CreateScreen;","map":{"version":3,"sources":["C:/Users/manas/ChatApp/screens/CreateScreen.js"],"names":["customFonts","require","CreateScreen","getUsers","db","collection","onSnapshot","snapshot","data","docs","map","document","setState","users","console","log","state","getConversations","conversations","getUserDetails","where","userId","get","then","forEach","doc","firstName","emailID","lastName","contact","docId","id","userName","description","userImage","profilePicture","getTargetUserDetails","targetedUserId","data2","targetUserName","targetUserImage","fetchImage","imageName","storageRef","firebase","storage","ref","child","getDownloadURL","url","image","catch","error","createConversation","query","length","secQuery","alert","conversationId","createId","add","createConversation2","find","user","query2","conversation","targetedUserId2","setTimeout","firestore","Timestamp","now","toDate","auth","currentUser","email","fontsLoaded","Font","loadAsync","Math","random","toString","substring","_loadFontsAsync","flex","props","navigation","goBack","text","style","color","fontSize","fontWeight","height","paddingTop","alignItems","justifyContent","width","marginLeft","borderBottomWidth","paddingBottom","borderBottomColor","marginTop","backgroundColor","padding","borderRadius","React","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, StyleSheet, Text, FlatList,TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { ListItem, SearchBar, Icon, Header } from 'react-native-elements';\r\nimport firebase from 'firebase';\r\nimport db from '../config'\r\nimport {Avatar} from 'react-native-elements';\r\nimport * as Font from \"expo-font\";\r\n\r\nlet customFonts = {\r\n    \"Raleway\": require(\"../assets/Raleway-Regular.ttf\"),\r\n    \"Raleway-Bold\": require(\"../assets/Raleway-Bold.ttf\"),\r\n    \"Raleway-Thin\": require(\"../assets/Raleway-Thin.ttf\"),\r\n};\r\n\r\nexport default class CreateScreen extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userId: firebase.auth().currentUser.email,\r\n            targetedUserId: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            contact: '',\r\n            docId: '',\r\n            userName: '',\r\n            targetUserName: '',\r\n            description: '',\r\n            userImage: '',\r\n            targetUserImage: '',\r\n            query: [],\r\n            secQuery: [],\r\n            users: [],\r\n            conversations: [],\r\n            fontsLoaded: false\r\n        }\r\n    }\r\n\r\n    async _loadFontsAsync() {\r\n        await Font.loadAsync(customFonts);\r\n        this.setState({ fontsLoaded: true });\r\n      }\r\n\r\n    getUsers = () => {\r\n        db.collection('Users')\r\n        .onSnapshot((snapshot)=>{\r\n            var data = snapshot.docs.map(document => document.data());\r\n            this.setState({\r\n              users : data\r\n            });\r\n        })\r\n        console.log(this.state.users)\r\n    }\r\n\r\n    getConversations = () => {\r\n        db.collection('Conversations')\r\n        .onSnapshot((snapshot)=>{\r\n            var data = snapshot.docs.map(document => document.data());\r\n            this.setState({\r\n              conversations : data\r\n            });\r\n        })\r\n        console.log(this.state.conversations)\r\n    }\r\n\r\n    getUserDetails = () => {\r\n        db.collection(\"Users\").where('emailID','==',this.state.userId).get()\r\n        .then(snapshot => {\r\n          snapshot.forEach(doc => {\r\n          var data = doc.data()\r\n            this.setState({\r\n              firstName : data.emailID,\r\n              lastName  : data.lastName,\r\n              contact   : data.contact,\r\n              docId     : doc.id,\r\n              userName: data.firstName + \" \" + data.lastName,\r\n              description: data.description,\r\n              userImage: data.profilePicture\r\n            })\r\n          });\r\n        })\r\n    }\r\n\r\n    getTargetUserDetails = () => {\r\n        db.collection(\"Users\").where('emailID','==',this.state.targetedUserId).get()\r\n        .then(snapshot => {\r\n          snapshot.forEach(doc => {\r\n          var data2 = doc.data()\r\n            this.setState({\r\n              targetUserName: data2.firstName + \" \" + data2.lastName,\r\n              targetUserImage: data2.profilePicture\r\n            })\r\n            console.log(this.state.targetUserName);\r\n          });\r\n        })\r\n        \r\n    }\r\n\r\n    fetchImage = (imageName) => {\r\n        var storageRef = firebase.storage().ref().child(\"user_profiles/\"+imageName);\r\n        storageRef.getDownloadURL()\r\n        .then((url)=>{\r\n            this.setState({\r\n                image: url\r\n            })\r\n        })\r\n        .catch((error)=>{\r\n            this.setState({\r\n                image: '#'\r\n            })\r\n        })\r\n    }\r\n\r\n    createId(){\r\n        return Math.random().toString(36).substring(7);\r\n    }\r\n\r\n    createConversation = () => {\r\n        \r\n        // .onSnapshot((snapshot)=>{\r\n        //     var addedExplanationsList = snapshot.docs.map(document => document.data());\r\n        //     this.setState({\r\n        //       addedExplanationsList : addedExplanationsList\r\n        //     });\r\n        //     this.arrayholder = snapshot.docs.map(document => document.data());\r\n        //   })\r\n        var query = db.collection('Users').where('emailID','==',this.state.targetedUserId)\r\n        .onSnapshot((snapshot)=>{\r\n            var data = snapshot.docs.map(document => document.data());\r\n            this.setState({\r\n              query : data\r\n            });\r\n           \r\n        })\r\n        console.log('query '+this.state.query.length)\r\n        if(this.state.query.length === 0){\r\n            console.log('query '+this.state.query.length)\r\n            this.setState({\r\n                query: [],\r\n                secQuery: [],\r\n                targetedUserId: ''\r\n            }) \r\n            return alert('This user does not exist')\r\n        }\r\n        else {\r\n            var secQuery = db.collection('Conversations').where('targetedUserId','==',this.state.targetedUserId).where('targetedUserId2','==',this.state.userId)\r\n            .onSnapshot((snapshot)=>{\r\n                var data = snapshot.docs.map(document => document.data());\r\n                this.setState({\r\n                  secQuery : data\r\n                });\r\n            })\r\n              console.log('Secquery'+ this.state.secQuery.length)\r\n            if(this.state.secQuery.length === 0) {\r\n                if(this.state.targetedUserId !== this.state.userId) {\r\n                    console.log('Secquery'+ this.state.secQuery.length)\r\n                    var conversationId = this.createId();\r\n        \r\n                    db.collection(\"Conversations\").add({\r\n                        'name': this.state.userName,\r\n                        'targetedUserId': this.state.targetedUserId,\r\n                        'targetedUserId2': this.state.userId,\r\n                        'lastMessage': '',\r\n                        'lastMessageDate': '',\r\n                        'image': this.state.userImage,\r\n                        'conversationId': conversationId\r\n                    })\r\n            \r\n                    db.collection(\"Conversations\").add({\r\n                        'name': this.state.targetUserName,\r\n                        'targetedUserId': this.state.userId,\r\n                        'targetedUserId2': this.state.targetedUserId,\r\n                        'lastMessage': '',\r\n                        'lastMessageDate': '',\r\n                        'image': this.state.targetUserImage,\r\n                        'conversationId': conversationId\r\n                    })\r\n\r\n                    this.setState({\r\n                        query: [],\r\n                        secQuery: [],\r\n                        targetedUserId: ''\r\n                    })\r\n\r\n                    return alert('Conversation initiated.')\r\n                    \r\n                }\r\n                else {\r\n                    this.setState({\r\n                        query: [],\r\n                        secQuery: [],\r\n                        targetedUserId: ''\r\n                    })\r\n\r\n                    return alert('You cannot start a conversation with yourself.')\r\n                }\r\n\r\n            }\r\n            else {\r\n                this.setState({\r\n                    query: [],\r\n                    secQuery: [],\r\n                    targetedUserId: ''\r\n                })\r\n                return alert('This user already exists in your conversations.')\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            query: [],\r\n            secQuery: [],\r\n            targetedUserId: ''\r\n        })\r\n       \r\n    }\r\n\r\n    createConversation2 = () => {\r\n        var users = this.state.users;\r\n        var conversations = this.state.conversations;\r\n\r\n        var query = users.find(user => user.emailID === this.state.targetedUserId)\r\n\r\n        if(query) {\r\n            var query2 = conversations.find(conversation => conversation.targetedUserId === this.state.targetedUserId && conversation.targetedUserId2 === this.state.userId);\r\n            if(query2) {\r\n                return alert('This user already exists in your conversations.')\r\n            }\r\n            else {\r\n                if(this.state.targetedUserId !== this.state.userId) {\r\n                    console.log(this.state.targetedUserId);\r\n                    this.getTargetUserDetails();\r\n                    console.log(this.state.targetedUserId);\r\n\r\n                    var conversationId = this.createId();\r\n\r\n                    setTimeout(()=>{\r\n                        db.collection(\"Conversations\").add({\r\n                            'name': this.state.userName,\r\n                            'targetedUserId': this.state.targetedUserId,\r\n                            'targetedUserId2': this.state.userId,\r\n                            'lastMessage': 'Start chatting with your friend!',\r\n                            'lastMessageDate': firebase.firestore.Timestamp.now().toDate(),\r\n                            'image': this.state.userImage,\r\n                            'conversationId': conversationId\r\n                        })\r\n                \r\n                        db.collection(\"Conversations\").add({\r\n                            'name': this.state.targetUserName,\r\n                            'targetedUserId': this.state.userId,\r\n                            'targetedUserId2': this.state.targetedUserId,\r\n                            'lastMessage': 'Start chatting with your friend!',\r\n                            'lastMessageDate': firebase.firestore.Timestamp.now().toDate(),\r\n                            'image': this.state.targetUserImage,\r\n                            'conversationId': conversationId\r\n                        })\r\n                        this.getConversations();\r\n                        this.setState({\r\n                            query: [],\r\n                            secQuery: [],\r\n                            targetedUserId: ''\r\n                        })\r\n                    }, 5000);\r\n\r\n                    console.log(this.state.targetUserName);\r\n\r\n                    return alert('Conversation initiated.')\r\n                }\r\n                else {\r\n                    return alert('You cannot start a conversation with yourself.')\r\n                }\r\n            }\r\n        } else {\r\n            return alert('User not found.');\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserDetails();\r\n        this.fetchImage(this.state.userId);\r\n        this.getUsers();\r\n        this.getConversations();\r\n        this._loadFontsAsync();\r\n        this.setState({\r\n            query: [],\r\n            secQuery: [],\r\n            targetedUserId: ''\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({\r\n            query: [],\r\n            secQuery: [],\r\n            targetedUserId: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <View style={{flex:1}}>\r\n                <Header\r\n                        leftComponent={<Icon name=\"arrow-left\" type='feather' color='white' onPress={() => this.props.navigation.goBack()} />}\r\n                        centerComponent={{ text: \"Create\", style: { color: 'white', fontSize: 20, fontWeight: 'bold', height: 50, paddingTop: 10 } }}\r\n                        backgroundColor=\"#f75a4f\"\r\n                    />\r\n                <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n                    \r\n                    <View style={{width: '75%'}}>\r\n                        <Text style={{marginLeft: -3, color: '#f75a4f', fontWeight: 'bold'}}> Participant </Text>\r\n                        <TextInput\r\n                        style={{borderBottomWidth: 1, paddingBottom: 5, borderBottomColor:'#f75a4f', fontSize:20, marginTop: 5}}\r\n                        placeholder='Email'\r\n                        onChangeText={(text)=>{\r\n                            this.setState({\r\n                                targetedUserId: text\r\n                            })\r\n                        }}\r\n                        value={this.state.targetedUserId}/>\r\n\r\n                        <TouchableOpacity \r\n                        onPress={()=>{this.createConversation2()}}\r\n                        style={{marginTop: 20, justifyContent: 'center', alignItems: 'center', backgroundColor: '#f75a4f', padding: 5, borderRadius: 5, height: 50}}>\r\n                            <Text style={{color: 'white', fontSize: 20, fontWeight: '500'}}> Create </Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}